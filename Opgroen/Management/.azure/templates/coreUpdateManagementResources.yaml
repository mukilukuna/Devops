parameters:
  - name: azureResourceManagerConnection
    type: string
  - name: location
    type: string
    default: "westeurope"
  - name: subscriptionId # Replace with or add managementGroupId if needed
    type: string
  - name: variableGroup
    type: string
  - name: variableFile
    type: string
  - name: AZURE_DEVOPS_EXT_PAT
    type: string
    default: $(System.AccessToken)
  - name: organization
    type: string
    default: $(System.TeamFoundationCollectionUri)
  - name: project
    type: string
    default: $(System.TeamProject)

stages:
  - stage: CoreUpdateManagementResources
    dependsOn:
      - CoreMonitoringResources
    displayName: CoreUpdateManagementResources
    variables:
      - name: resourceGroup
        value: $(mgmtWeu-monitoringRG_ResourceName)
      - template: ${{ parameters.variableFile }}

    jobs:
      - job: CoreUpdateManagementResources
        displayName: "CoreUpdateManagementResources"
        steps:
          - checkout: self
          - checkout: git://${{ variables.templateProject }}/${{ variables.templateRepo }}@refs/tags/${{ variables.version }}
          - task: AzurePowerShell@5
            name: DeployBicepFile
            displayName: Deploy Bicep File
            inputs:
              azureSubscription: ${{ parameters.azureResourceManagerConnection }}
              azurePowerShellVersion: OtherVersion
              preferredAzurePowerShellVersion: 12.0.0
              ScriptType: InlineScript
              Inline: |

                # Build the subscriptions array on the current subscriptions under the customer management group
                Install-Module Az.ResourceGraph -Force -AllowClobber -Scope CurrentUser -Repository PSGallery
                $subscriptions = @()
                $arrayList = New-Object -TypeName System.Collections.ArrayList
                $queryResults = Search-AzGraph -Query "ResourceContainers | where type =~ 'microsoft.resources/subscriptions'" -ManagementGroup $(managementGroup-customerMg_ResourceName) -First 200
                $queryResults.id | % { $item = ($_ -split '/')[-1]; $arrayList.Add($item) }
                $arrayList | ForEach-Object { $subscriptions += @{ id=$_; locations = @('${{ parameters.location }}')} }

                # Switch context to the management sub
                Set-AzContext -SubscriptionId ${{ parameters.subscriptionId }} | Out-Null

                # Build the deployment parameters
                $Parameters = @{
                  Name = "UpdateManagement-$(Build.BuildNumber)"
                  ResourceGroupName = "$(resourceGroup)"
                  Location = "${{ parameters.location }}"
                  TemplateFile = "$(Agent.BuildDirectory)/s/$(Build.Repository.Name)/modules/core/coreUpdateManagement.bicep"
                  TemplateParameterFile = "$(Agent.BuildDirectory)/s/$(Build.Repository.Name)/parameters/updateManagement/coreUpdateManagement.bicepparam"
                  KeyVaultResourceId = "$(mgmtWeu-keyVault_ResourceId)"
                  automationAccountName = "$(mgmtWeu-automationAccountLA_ResourceName)"
                  userAssignedIdentityName = "$(mgmtWeu-updateManagementUserAssignedIdentity_ResourceName)"
                  storageAccountName = "$(mgmtWeu-deploymentScriptStorageAccount_ResourceName)"
                  virtualNetworkResourceId = "$(mgmtWeu-virtualNetwork_ResourceId)"
                  subscriptions = $subscriptions
                  Verbose = $true
                }

                # Deploy configuration
                New-AzResourceGroupDeployment @Parameters
