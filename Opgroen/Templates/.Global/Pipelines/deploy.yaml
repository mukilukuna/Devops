parameters:
  - name: azureSubscription
    type: string
  - name: removeDeployment
    type: boolean
    default: false
  - name: workloadName
    type: string
  - name: workloadType
    type: string
  - name: templateFileName
    type: string
    default: template.bicep
  - name: outPutPrefix
    type: string
    default: ''
  - name: parametersPath
    type: string
  - name: location
    type: string
  - name: resourceGroupName
    type: string
    default: ""
  - name: subscriptionId
    type: string
    default: ""
  - name: managementGroupId
    type: string
    default: ""
  - name: templateRepo
    type: string
  - name: whatIfDeployment
    type: boolean
    default: false
  - name: AZURE_DEVOPS_EXT_PAT
    type: string
    default: $(System.AccessToken)

steps:
  - template: /.Global/Pipelines/Tasks/convertToJson.yaml@templates
    parameters:
      workloadName: ${{ parameters.workloadName }}
      workloadType: ${{ parameters.workloadType }}
      templateRepo: ${{ parameters.templateRepo }}
      parametersPath: $(System.DefaultWorkingDirectory)/$(Build.Repository.Name)${{ parameters.parametersPath }}
      templateFileName: ${{ parameters.templateFileName }}

  - template: /.Global/Pipelines/Tasks/unitTest.yaml@templates
    parameters:
      workloadName: ${{ parameters.workloadName }}
      workloadType: ${{ parameters.workloadType }}
      templateRepo: ${{ parameters.templateRepo }}
      parametersPath: $(System.DefaultWorkingDirectory)/$(Build.Repository.Name)${{ parameters.parametersPath }}

  # [Deployment] task(s)
  #--------------------------------
  - task: AzurePowerShell@5
    name: deploy
    displayName: "Deploy [${{ parameters.workloadName }}] via connection [${{ parameters.azureSubscription }}]"
    inputs:
      azureSubscription: ${{ parameters.azureSubscription }}
      azurePowerShellVersion: LatestVersion
      pwsh: true
      ScriptType: InlineScript
      inline: |
        # Load used functions
        . "$(System.DefaultWorkingDirectory)/${{ parameters.templateRepo }}/.Global/Scripts/Add-VariableGroup.ps1"
        . "$(System.DefaultWorkingDirectory)/${{ parameters.templateRepo }}/.Global/Scripts/New-WorkloadDeployment.ps1"

        # ----------------- #
        # INVOKE DEPLOYMENT #
        # ----------------- #
        $functionInput = @{
          workloadName         = '${{ parameters.workloadName }}'
          basePath             = "$(System.DefaultWorkingDirectory)/${{ parameters.templateRepo }}"
          workloadType         = '${{ parameters.workloadType }}'
          location             = '${{ parameters.location }}'
          # Note: if parameter is like "`$(removeDeployment*" it was not set as the variable was not resolved
          removeDeployment     = ('${{ parameters.removeDeployment }}' -like "`$(removeDeployment*") ? $false : [System.Convert]::ToBoolean('${{ parameters.removeDeployment }}')
        }

        if ('${{ parameters.resourceGroupName }}') {
          $functionInput += @{
            resourceGroupName = '${{ parameters.resourceGroupName }}'
          }
        }

        if ('${{ parameters.subscriptionId }}') {
          $functionInput += @{
            subscriptionId = '${{ parameters.subscriptionId }}'
          }
        }

        if ('${{ parameters.managementGroupId }}') {
          $functionInput += @{
            managementGroupId = '${{ parameters.managementGroupId }}'
          }
        }

        if ('${{ parameters.parametersPath }}'){
          $functionInput += @{
            parameterFilePath = '$(System.DefaultWorkingDirectory)/$(Build.Repository.Name)${{ parameters.parametersPath }}'
          }
        }

        if ('${{ parameters.whatIfDeployment }}' -eq 'true') {
          $functionInput += @{
            whatIfDeployment = $true
          }
        }

        if ('${{ parameters.outPutPrefix }}') {
          $functionInput += @{
            outPutPrefix = '${{ parameters.outPutPrefix }}'
            AZURE_DEVOPS_EXT_PAT = '${{ parameters.AZURE_DEVOPS_EXT_PAT }}'
          }
        }

        Write-Verbose "Invoke task with" -Verbose
        $functionInput

        New-ModuleDeployment @functionInput -Verbose
