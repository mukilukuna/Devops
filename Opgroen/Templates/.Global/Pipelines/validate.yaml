parameters:
  - name: azureSubscription
    type: string
  - name: subscriptionId
    type: string
    default: ""
  - name: managementGroupId
    type: string
    default: ""
  - name: resourceGroupName
    type: string
    default: ""
  - name: location
    type: string
  - name: workloadName
    type: string
  - name: workloadType
    type: string
  - name: templateFileName
    type: string
    default: template
  - name: parametersPath
    type: string
    default: ""
  - name: templateRepo
    type: string
  - name: failTaskOnFailedTests
    type: boolean
    default: false

steps:
  - template: /.Global/Pipelines/Tasks/convertToJson.yaml@templates
    parameters:
      workloadName: ${{ parameters.workloadName }}
      workloadType: ${{ parameters.workloadType }}
      templateRepo: ${{ parameters.templateRepo }}
      parametersPath: $(System.DefaultWorkingDirectory)/$(Build.Repository.Name)${{ parameters.parametersPath }}
      templateFileName: ${{ parameters.templateFileName }}

  - template: /.Global/Pipelines/Tasks/unitTest.yaml@templates
    parameters:
      workloadName: ${{ parameters.workloadName }}
      workloadType: ${{ parameters.workloadType }}
      templateRepo: ${{ parameters.templateRepo }}
      parametersPath: $(System.DefaultWorkingDirectory)/$(Build.Repository.Name)${{ parameters.parametersPath }}

  - task: AzurePowerShell@5
    displayName: "Validate [${{ parameters.workloadName }}] via connection [${{ parameters.azureSubscription }})]"
    condition: ne('${{ parameters.parametersPath }}', '')
    inputs:
      azureSubscription: ${{ parameters.azureSubscription }}
      azurePowerShellVersion: latestVersion
      ScriptType: InlineScript
      pwsh: true
      inline: |
        # Load used functions
        . "$(System.DefaultWorkingDirectory)/${{ parameters.templateRepo }}/.Global/Scripts/Test-TemplateWithParameters.ps1"

        # ----------- #
        # INVOKE TEST #
        # ----------- #
        $functionInput = @{
          basePath = '$(System.DefaultWorkingDirectory)/${{ parameters.templateRepo }}/'
          workloadType        = '${{ parameters.workloadType }}'
          workloadName        = "${{ parameters.workloadName }}"
          parameterFilePath  = '$(System.DefaultWorkingDirectory)/$(Build.Repository.Name)${{ parameters.parametersPath }}'
          location           = '${{ parameters.location }}'
          resourceGroupName  = '${{ parameters.resourceGroupName }}'
          subscriptionId     = '${{ parameters.subscriptionId }}'
          managementGroupId  = '${{ parameters.managementGroupId }}'
        }

        Write-Verbose "Invoke task with" -Verbose
        $functionInput

        Test-TemplateWithParameterFile @functionInput -Verbose

  - task: AzurePowerShell@5
    displayName: "What-if deployment"
    condition: ne('${{ parameters.parametersPath }}', '')
    inputs:
      azureSubscription: ${{ parameters.azureSubscription }}
      ScriptType: InlineScript
      azurePowerShellVersion: latestVersion
      pwsh: true
      inline: |
        $workloadName = "${{ parameters.workloadName }}"
        $workloadType = "${{ parameters.workloadType }}"
        $templateFileName = "${{ parameters.templateFileName }}"
        $parameterFilePath = "$(System.DefaultWorkingDirectory)/$(Build.Repository.Name)${{ parameters.parametersPath }}"
        $location = "${{ parameters.location }}"
        $resourceGroupName = "${{ parameters.resourceGroupName }}"
        $managementGroupId = "${{ parameters.managementGroupId }}"
        $subscriptionId = "${{ parameters.subscriptionId }}"

        $BRCTemplates = "$(System.DefaultWorkingDirectory)/${{ parameters.templateRepo }}"
        $templatePath = Join-Path -ChildPath $templateFileName -Path (Join-Path -ChildPath $workloadName -Path (Join-Path -ChildPath $workloadType -Path $BRCTemplates))

        if (Select-String -path $templatePath -pattern "targetScope = 'tenant'") {
          New-AzTenantDeployment -WhatIf -Location $location -TemplateFile $templatePath -TemplateParameterFile $parameterFilePath
        }
        elseif (Select-String -path $templatePath -pattern ("targetScope = 'managementGroup'")) {
          New-AzManagementGroupDeployment -WhatIf -Location $location -ManagementGroupId $managementGroupId -TemplateFile $templatePath -TemplateParameterFile $parameterFilePath
        }
        elseif (Select-String -path $templatePath -pattern ("targetScope = 'subscription'")) {
          New-AzDeployment -WhatIf -Location $location -TemplateFile $templatePath -TemplateParameterFile $parameterFilePath
        }
        else {
          Select-AzSubscription $subscriptionId
          New-AzResourceGroupDeployment -WhatIf -ResourceGroupName $resourceGroupName -TemplateFile $templatePath -TemplateParameterFile $parameterFilePath
        }
