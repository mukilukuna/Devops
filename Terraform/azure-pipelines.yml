trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
  # Service connection-naam (Azure Resource Manager) in Azure DevOps
  backendServiceArm: 'Visual Studio Enterprise-abonnement â€“ MPN(098e34b6-d88e-447e-ba9a-245275343d63)'

  # Backend parameters (kunnen zo blijven; storage account wordt dynamisch bepaald)
  backendResourceGroup: 'rg-tfstate'
  backendLocation: 'westeurope'
  backendContainerName: 'tfstate'
  backendKey: 'terraform.tfstate'

stages:
- stage: Plan
  displayName: 'Terraform Plan'
  jobs:
  - job: TerraformPlan
    displayName: 'Terraform Plan'
    steps:
    - task: TerraformInstaller@0
      inputs:
        terraformVersion: 'latest'

    - task: AzureCLI@2
      displayName: 'Provision backend (RG/Storage/Container)'
      inputs:
        azureSubscription: $(backendServiceArm)
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          set -euo pipefail
          RG='$(backendResourceGroup)'
          LOC='$(backendLocation)'
          CONTAINER='$(backendContainerName)'

          # Deterministisch storage account (max 24, lowercase).
          SUFFIX=$(echo -n "${SYSTEM_TEAMPROJECTID:-local}" | sha256sum | cut -c1-8)
          ACCOUNT="tfstate${SUFFIX}"
          echo "Using storage account: ${ACCOUNT}"

          az group create -n "$RG" -l "$LOC" -o none
          az storage account create -g "$RG" -n "$ACCOUNT" -l "$LOC" --sku Standard_LRS --kind StorageV2 -o none
          ACCESS_KEY=$(az storage account keys list -g "$RG" -n "$ACCOUNT" --query '[0].value' -o tsv)
          az storage container create -n "$CONTAINER" --account-name "$ACCOUNT" --auth-mode key --account-key "$ACCESS_KEY" -o none

          echo "##vso[task.setvariable variable=backendStorageAccount]$ACCOUNT"
          echo "##vso[task.setvariable variable=backendAccessKey]$ACCESS_KEY"

    - task: AzureCLI@2
      displayName: 'Terraform Init and Plan'
      inputs:
        azureSubscription: $(backendServiceArm)
        scriptType: bash
        scriptLocation: inlineScript
        workingDirectory: '$(System.DefaultWorkingDirectory)/Terraform'
        inlineScript: |
          set -euo pipefail
          terraform --version
          terraform init \
            -backend-config="resource_group_name=$(backendResourceGroup)" \
            -backend-config="storage_account_name=$(backendStorageAccount)" \
            -backend-config="container_name=$(backendContainerName)" \
            -backend-config="key=$(backendKey)" \
            -backend-config="access_key=$(backendAccessKey)"
          terraform plan -out=tfplan

- stage: Deploy
  displayName: 'Terraform Apply'
  dependsOn: Plan
  condition: succeeded('Plan')
  jobs:
  - job: TerraformApply
    displayName: 'Terraform Apply'
    steps:
    - task: TerraformInstaller@0
      inputs:
        terraformVersion: 'latest'

    - task: AzureCLI@2
      displayName: 'Provision backend (idempotent)'
      inputs:
        azureSubscription: $(backendServiceArm)
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          set -euo pipefail
          RG='$(backendResourceGroup)'
          LOC='$(backendLocation)'
          CONTAINER='$(backendContainerName)'

          SUFFIX=$(echo -n "${SYSTEM_TEAMPROJECTID:-local}" | sha256sum | cut -c1-8)
          ACCOUNT="tfstate${SUFFIX}"
          echo "Using storage account: ${ACCOUNT}"

          az group create -n "$RG" -l "$LOC" -o none
          az storage account create -g "$RG" -n "$ACCOUNT" -l "$LOC" --sku Standard_LRS --kind StorageV2 -o none
          ACCESS_KEY=$(az storage account keys list -g "$RG" -n "$ACCOUNT" --query '[0].value' -o tsv)
          az storage container create -n "$CONTAINER" --account-name "$ACCOUNT" --auth-mode key --account-key "$ACCESS_KEY" -o none

          echo "##vso[task.setvariable variable=backendStorageAccount]$ACCOUNT"
          echo "##vso[task.setvariable variable=backendAccessKey]$ACCESS_KEY"

    - task: AzureCLI@2
      displayName: 'Terraform Init and Apply'
      inputs:
        azureSubscription: $(backendServiceArm)
        scriptType: bash
        scriptLocation: inlineScript
        workingDirectory: '$(System.DefaultWorkingDirectory)/Terraform'
        inlineScript: |
          set -euo pipefail
          terraform --version
          terraform init \
            -backend-config="resource_group_name=$(backendResourceGroup)" \
            -backend-config="storage_account_name=$(backendStorageAccount)" \
            -backend-config="container_name=$(backendContainerName)" \
            -backend-config="key=$(backendKey)" \
            -backend-config="access_key=$(backendAccessKey)"
          terraform apply -auto-approve
